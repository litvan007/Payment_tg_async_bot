import yaml
import sys
import uuid

from telebot import types
from telebot.async_telebot import AsyncTeleBot

from sql_db_pay import connect_and_create_db, add_user, get_users, update_payment_info

import asyncio
import requests
from bs4 import BeautifulSoup

import os

import aiofiles

try:
    with open("config.yml") as yaml_file:
        config = yaml.load(yaml_file, Loader=yaml.FullLoader)
except FileNotFoundError:
    with open("~/course_work/config.yml") as yaml_file:
        config = yaml.load(yaml_file, Loader=yaml.FullLoader)

bot = AsyncTeleBot(config['bot']['token'])

@bot.message_handler(commands=['start'])
async def send_welcome(message):
    user_id = message.from_user.id 
    user_name = message.from_user.username
    curr_users = [el[0] for el in await get_users()]
    if user_id in curr_users:
        await bot.send_message(599202079, text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username if message.from_user.username is not None else "Empty"} <b> –ü–†–û–î–û–õ–ñ–ò–õ </b> —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º', 
                            parse_mode="HTML") 
    else:
        await bot.send_message(599202079, text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username if message.from_user.username is not None else "Empty"} <b> –ù–∞—á–∞–ª </b> —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º', 
                            parse_mode="HTML") 
        value = await add_user(user_id, user_name, False)
        if value == "Not having db files":
            await bot.send_message(599202079, text = f'–ë—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ë–î. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –Ω–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å—Å—è', parse_mode="HTML") 
            sys.exit()


    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="to_buying_enter")
    btn2 = types.InlineKeyboardButton("–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–º–æ –∫–Ω–∏–≥–∏", callback_data="get_promo")
    markup.add(btn1)
    markup.add(btn2)

    await bot.send_message(message.chat.id, text='üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ ¬´–ì–æ—Ä–æ–¥ –ø–æ—é—â–∏—Ö –º–æ—Å—Ç–æ–≤¬ª. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–Ω–∏–≥–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –Ω–∞–π–¥—ë—à—å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, –∑–∞–≥–∞–¥–æ—á–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∏—Ä –°–∫–∞–∑–∫–∏ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏. üåüüéß', reply_markup=markup)


@bot.message_handler(commands=['status'])
async def send_welcome(message):
    user_id = message.from_user.id
    users_or_value = await get_users()
    if users_or_value == 'Not having db files':
        await bot.send_message(599202079, text = f'–ë—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ë–î. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –Ω–µ —Å–º–æ–≥ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', parse_mode="HTML") 
        sys.exit()
        
    payments_info = {el[0] : el[2] for el in users_or_value}

    if payments_info[user_id] == True:
        await bot.send_message(message.chat.id, text=f"–û–ø–ª–∞—Ç–∞ —É–∂–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞. –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {config['other']['link_for_joining']}")
    else:
        await bot.send_message(message.chat.id, text=f'–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.')
        prices = [types.LabeledPrice(label='–ì–æ—Ä–æ–¥ –ø–æ—é—â–∏—Ö –º–æ—Å—Ç–æ–≤', amount=100000)] # amount –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        await bot.send_invoice(
            chat_id=message.chat.id,
            title='–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞',
            description='–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—É–¥–∏–æ–∫–Ω–∏–≥–µ',
            invoice_payload=str(uuid.uuid1()),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—á–µ—Ç–∞
            provider_token=config['other']['payment_token'],  # –¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            start_parameter="Buying",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç—ã
            currency='RUB',  # –í–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RUB)
            prices=prices,
        )

@bot.message_handler(commands=['help'])
async def send_welcome(message):
    await bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ.')

@bot.callback_query_handler(func=lambda call: call.data == 'get_promo')
async def getting_promo_mode(call): # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞ + —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–Ω–∞—Ç –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ
    async with aiofiles.open(config['other']['promo_file_path'], mode='rb') as f:
        audio_data = await f.read()
        await bot.send_audio(call.message.chat.id, audio_data, caption="–ü—Ä–æ–º–æ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ ‚èØÔ∏è")

@bot.callback_query_handler(func=lambda call: call.data == 'to_buying_enter')
async def purchasing_mode(call): # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞ + —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–Ω–∞—Ç –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ
    user_id = call.from_user.id
    users_or_value = await get_users()
    if users_or_value == 'Not having db files':
        await bot.send_message(599202079, text = f'–ë—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ë–î. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} –Ω–µ —Å–º–æ–≥ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', parse_mode="HTML") 
        sys.exit()
        
    payments_info = {el[0] : el[2] for el in users_or_value}
    if payments_info[user_id] == False:
        prices = [types.LabeledPrice(label='–ì–æ—Ä–æ–¥ –ø–æ—é—â–∏—Ö –º–æ—Å—Ç–æ–≤', amount=100000)] # amount –≤ –∫–æ–ø–µ–π–∫–∞—Ö

        await bot.send_invoice(
            chat_id=call.message.chat.id,
            title='–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞',
            description='–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—É–¥–∏–æ–∫–Ω–∏–≥–µ',
            invoice_payload=str(uuid.uuid1()),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—á–µ—Ç–∞
            provider_token=config['other']['payment_token'],  # –¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            start_parameter="Buying",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç—ã
            currency='RUB',  # –í–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RUB)
            prices=prices,
        )
    else:
        await bot.send_message(call.message.chat.id, text='–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π')

@bot.pre_checkout_query_handler(func=lambda query: True)
async def checkout(pre_checkout_query):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–£–ø—Å! üòÖ –ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –≤–∞—à–µ–π –æ–ø–ª–∞—Ç–æ–π. –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑! üîÑ"
                                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –≤–µ—Ä–Ω–æ, –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ —É –≤–∞—Å –≤—Å—ë –µ—â—ë –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —Å —Ä–∞–¥–æ—Å—Ç—å—é! üìö")

@bot.message_handler(content_types=['successful_payment'])
async def got_payment(message):
    user_id = message.from_user.id
    users_or_value = await get_users()
    if users_or_value == 'Not having db files':
        await bot.send_message(599202079, text = f'–ë—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ë–î. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ. –ü—É—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å–ø–∏—Å–∞–Ω–∏–µ', parse_mode="HTML") 
        sys.exit()
        
    payments_info = {el[0] : el[2] for el in users_or_value}
    if payments_info[user_id] == False:
        await bot.send_message(message.chat.id, f'''‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! üéß
[üîó –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª!]({config["other"]["link_for_joining"]})''', parse_mode="Markdown")
        await update_payment_info(user_id, 1)

@bot.chat_join_request_handler()
async def allow_request(message: types.ChatJoinRequest):
    user_id = message.from_user.id
    users_or_value = await get_users()
    if users_or_value == 'Not having db files':
        await bot.send_message(599202079, text = f'–ë—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ë–î. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–∞–Ω–∞–ª—É. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∏ –¥–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞', parse_mode="HTML") 
        sys.exit()
        
    payments_info = {el[0] : el[2] for el in users_or_value}

    if payments_info[user_id] == True:
        await bot.send_message(message.from_user.id, 
        '''üé∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ì–æ—Ä–æ–¥ –ü–æ—é—â–∏—Ö –ú–æ—Å—Ç–æ–≤"! üåâ

–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –Ω–∞—à–µ–º—É —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–∞–Ω–∞–ª—É, –≥–¥–µ –∑–≤—É—á–∞—Ç –º–µ–ª–æ–¥–∏–∏ —Å–ª–æ–≤ –∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ —Å—é–∂–µ—Ç–∞. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —ç—Ç–æ–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è! üìñüéß''')	 
        await bot.send_message(599202079, f"{message.from_user.username if message.from_user.username is not None else 'Empty'}_{user_id} –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø" )
        await bot.approve_chat_join_request(
                message.chat.id,                                   
                message.from_user.id
        )

    else:
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="to_buying_enter")
        markup.add(btn)
        await bot.send_message(message.from_user.id, 
        '''–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ "–ì–æ—Ä–æ–¥ –ü–æ—é—â–∏—Ö –ú–æ—Å—Ç–æ–≤", –Ω–æ –æ–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. 

–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—É–¥–∏–æ–∫–Ω–∏–≥–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! üí≥üìñ''', 
        reply_markup=markup)	 

if __name__ == '__main__':
    path_to_db = config['db']['source_db_path']
    path_to_dest = config['db']['dest_db_path']
        
    if not os.path.isfile(path_to_db) and not os.path.isfile(config['db']['dest_db_path']):
        asyncio.run(connect_and_create_db(isFirst=True))

    asyncio.run(bot.polling(non_stop=True, request_timeout=90))
